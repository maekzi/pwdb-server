# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: Role
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: RoleWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: RoleRelateToOneForUpdateInput
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: RoleRelateToOneForCreateInput
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

type Project {
  id: ID!
  name: String
  desciption: Project_desciption_Document
  jiraLink: String
  gitlabLink: String
  confluenceLink: String
  credentials(where: CredentialWhereInput! = {}, orderBy: [CredentialOrderByInput!]! = [], take: Int, skip: Int! = 0): [Credential!]
  credentialsCount(where: CredentialWhereInput! = {}): Int
  created_by: User
  created_at: DateTime
}

type Project_desciption_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ProjectWhereUniqueInput {
  id: ID
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  name: StringFilter
  jiraLink: StringFilter
  gitlabLink: StringFilter
  confluenceLink: StringFilter
  credentials: CredentialManyRelationFilter
  created_by: UserWhereInput
  created_at: DateTimeFilter
}

input CredentialManyRelationFilter {
  every: CredentialWhereInput
  some: CredentialWhereInput
  none: CredentialWhereInput
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input ProjectOrderByInput {
  id: OrderDirection
  name: OrderDirection
  jiraLink: OrderDirection
  gitlabLink: OrderDirection
  confluenceLink: OrderDirection
  created_at: OrderDirection
}

input ProjectUpdateInput {
  name: String
  desciption: JSON
  jiraLink: String
  gitlabLink: String
  confluenceLink: String
  credentials: CredentialRelateToManyForUpdateInput
  created_by: UserRelateToOneForUpdateInput
  created_at: DateTime
}

input CredentialRelateToManyForUpdateInput {
  disconnect: [CredentialWhereUniqueInput!]
  set: [CredentialWhereUniqueInput!]
  create: [CredentialCreateInput!]
  connect: [CredentialWhereUniqueInput!]
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  name: String
  desciption: JSON
  jiraLink: String
  gitlabLink: String
  confluenceLink: String
  credentials: CredentialRelateToManyForCreateInput
  created_by: UserRelateToOneForCreateInput
  created_at: DateTime
}

input CredentialRelateToManyForCreateInput {
  create: [CredentialCreateInput!]
  connect: [CredentialWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Credential {
  id: ID!
  name: String
  type: CredentialTypeType
  enviroment: CredentialEnviromentType
  user: String
  password: String
  url: String
  info: Credential_info_Document
  assignedTo: Project
  lastUpdated_by: User
  lastUpdated_at: DateTime
  created_by: User
  created_at: DateTime
}

enum CredentialTypeType {
  fe
  be
  ftp
  ssh
  other
}

enum CredentialEnviromentType {
  develop
  stage
  live
  other
}

type Credential_info_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input CredentialWhereUniqueInput {
  id: ID
}

input CredentialWhereInput {
  AND: [CredentialWhereInput!]
  OR: [CredentialWhereInput!]
  NOT: [CredentialWhereInput!]
  id: IDFilter
  name: StringFilter
  type: CredentialTypeTypeNullableFilter
  enviroment: CredentialEnviromentTypeNullableFilter
  user: StringFilter
  password: StringFilter
  url: StringFilter
  assignedTo: ProjectWhereInput
  lastUpdated_by: UserWhereInput
  lastUpdated_at: DateTimeFilter
  created_by: UserWhereInput
  created_at: DateTimeFilter
}

input CredentialTypeTypeNullableFilter {
  equals: CredentialTypeType
  in: [CredentialTypeType!]
  notIn: [CredentialTypeType!]
  not: CredentialTypeTypeNullableFilter
}

input CredentialEnviromentTypeNullableFilter {
  equals: CredentialEnviromentType
  in: [CredentialEnviromentType!]
  notIn: [CredentialEnviromentType!]
  not: CredentialEnviromentTypeNullableFilter
}

input CredentialOrderByInput {
  id: OrderDirection
  name: OrderDirection
  type: OrderDirection
  enviroment: OrderDirection
  user: OrderDirection
  password: OrderDirection
  url: OrderDirection
  lastUpdated_at: OrderDirection
  created_at: OrderDirection
}

input CredentialUpdateInput {
  name: String
  type: CredentialTypeType
  enviroment: CredentialEnviromentType
  user: String
  password: String
  url: String
  info: JSON
  assignedTo: ProjectRelateToOneForUpdateInput
  lastUpdated_by: UserRelateToOneForUpdateInput
  lastUpdated_at: DateTime
  created_by: UserRelateToOneForUpdateInput
  created_at: DateTime
}

input ProjectRelateToOneForUpdateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
}

input CredentialUpdateArgs {
  where: CredentialWhereUniqueInput!
  data: CredentialUpdateInput!
}

input CredentialCreateInput {
  name: String
  type: CredentialTypeType
  enviroment: CredentialEnviromentType
  user: String
  password: String
  url: String
  info: JSON
  assignedTo: ProjectRelateToOneForCreateInput
  lastUpdated_by: UserRelateToOneForCreateInput
  lastUpdated_at: DateTime
  created_by: UserRelateToOneForCreateInput
  created_at: DateTime
}

input ProjectRelateToOneForCreateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

type Role {
  id: ID!
  name: String
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageProjects: Boolean
  canDeleteProjects: Boolean
  canManageCredentials: Boolean
  canDeleteCredentials: Boolean
  assignedTo(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  assignedToCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
  name: String
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  canSeeOtherUsers: BooleanFilter
  canManageUsers: BooleanFilter
  canManageRoles: BooleanFilter
  canManageProjects: BooleanFilter
  canDeleteProjects: BooleanFilter
  canManageCredentials: BooleanFilter
  canDeleteCredentials: BooleanFilter
  assignedTo: UserManyRelationFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canSeeOtherUsers: OrderDirection
  canManageUsers: OrderDirection
  canManageRoles: OrderDirection
  canManageProjects: OrderDirection
  canDeleteProjects: OrderDirection
  canManageCredentials: OrderDirection
  canDeleteCredentials: OrderDirection
}

input RoleUpdateInput {
  name: String
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageProjects: Boolean
  canDeleteProjects: Boolean
  canManageCredentials: Boolean
  canDeleteCredentials: Boolean
  assignedTo: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageProjects: Boolean
  canDeleteProjects: Boolean
  canManageCredentials: Boolean
  canDeleteCredentials: Boolean
  assignedTo: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(where: ProjectWhereUniqueInput!, data: ProjectUpdateInput!): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createCredential(data: CredentialCreateInput!): Credential
  createCredentials(data: [CredentialCreateInput!]!): [Credential]
  updateCredential(where: CredentialWhereUniqueInput!, data: CredentialUpdateInput!): Credential
  updateCredentials(data: [CredentialUpdateArgs!]!): [Credential]
  deleteCredential(where: CredentialWhereUniqueInput!): Credential
  deleteCredentials(where: [CredentialWhereUniqueInput!]!): [Credential]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  projects(where: ProjectWhereInput! = {}, orderBy: [ProjectOrderByInput!]! = [], take: Int, skip: Int! = 0): [Project!]
  project(where: ProjectWhereUniqueInput!): Project
  projectsCount(where: ProjectWhereInput! = {}): Int
  credentials(where: CredentialWhereInput! = {}, orderBy: [CredentialOrderByInput!]! = [], take: Int, skip: Int! = 0): [Credential!]
  credential(where: CredentialWhereUniqueInput!): Credential
  credentialsCount(where: CredentialWhereInput! = {}): Int
  roles(where: RoleWhereInput! = {}, orderBy: [RoleOrderByInput!]! = [], take: Int, skip: Int! = 0): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
